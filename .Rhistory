library(lubridate) ## Permite trabajar con fechas, horas y periodos de tiempo manipulando columnas de los datos.
library(data.table) ## Crea subconjuntos de filas, seleccionar y calcular columnas, y realizar agregaciones por grupo
library(googledrive) ## Permite acceder a los datos que están en el Drive
library(readxl) ## Permite importar archivos en formato xls.
library(tsoutliers)
library(forecast)
drive_auth()
##### La funcion drive_get se utiliza para obtener archivos de Drive por ruta id
##### La funcion drive_download se usa para descargar archivos directamente de goole drive
file <- drive_get("Datos priva Inv 3 2023-2024.xlsx")
drive_download(file, path = "Datos priva Inv 3 2023-2024.xlsx", overwrite = TRUE)
DatosClima0<- read_excel("Datos priva Inv 3 2023-2024.xlsx", sheet = "Inv Richel")
#### Se crea un data frame y con la funcion names(), se cambia el nombre de las columnas en los datos originales.
DatosClima <- data.frame(DatosClima0)
names(DatosClima) <- c("Fecha", "Temp.Interna.C", "HR.pct", "DH.g.m3.","Temp.Exterior.C", "Vel.Viento.m.s",
"Radiacion.W.m.", "Suma.Radiacion.J.cm")
#### DatosClima$hora <- Se saca la columna llamada hora utilizando la librearia lubridate
#### DatosClima$time <- converte las horas en minutos
#### DatosClima$Fecha2 <- coloca la fecha en un formato asignado mendiante la funcion as.Date
#DatosClima$Fecha2 <- dmy_hm(DatosClima$Fecha)
DatosClima$hora <- hour(DatosClima$Fecha)
DatosClima$time <- hour(DatosClima$Fecha) * 60 + minute(DatosClima$Fecha)
DatosClima$Fecha2 <- ymd(format(as.Date(DatosClima$Fecha), "%Y-%m-%d"))
names(DatosClima)
## Organiza las columnas, luego elimina la columna dos y cuatro y finalmente transforma DatosClima4 de un formato ancho a un formato largo.
DatosClima2 <-DatosClima[,c(1,11,10,2:8,12)]
DatosClima[,c(1,11,10,2:8,12)]
file <- drive_get("Datos priva Inv 3 2023-2024.xlsx")
drive_download(file, path = "Datos priva Inv 3 2023-2024.xlsx", overwrite = TRUE)
DatosClima0<- read_excel("Datos priva Inv 3 2023-2024.xlsx", sheet = "Inv Richel")
#### Se crea un data frame y con la funcion names(), se cambia el nombre de las columnas en los datos originales.
DatosClima <- data.frame(DatosClima0)
names(DatosClima) <- c("Fecha", "Temp.Interna.C", "HR.pct", "DH.g.m3.","Temp.Exterior.C", "Vel.Viento.m.s",
"Radiacion.W.m.", "Suma.Radiacion.J.cm")
#### DatosClima$hora <- Se saca la columna llamada hora utilizando la librearia lubridate
#### DatosClima$time <- converte las horas en minutos
#### DatosClima$Fecha2 <- coloca la fecha en un formato asignado mendiante la funcion as.Date
#DatosClima$Fecha2 <- dmy_hm(DatosClima$Fecha)
DatosClima$hora <- hour(DatosClima$Fecha)
DatosClima$time <- hour(DatosClima$Fecha) * 60 + minute(DatosClima$Fecha)
DatosClima$Fecha2 <- ymd(format(as.Date(DatosClima$Fecha), "%Y-%m-%d"))
names(DatosClima)
## Organiza las columnas, luego elimina la columna dos y cuatro y finalmente transforma DatosClima4 de un formato ancho a un formato largo.
DatosClima2 <-DatosClima[,c(1,10,9,2:8)]
#DatosClima3 <- DatosClima2[,-c(2,4)]
DatosClima4 <- gather(DatosClima2, "Variable", 'Valor', -c(1:3))
#### Grafico de barras para cada variable (columna) en el eje "y" y en el eje "x" las fehcas desde febrero 2023 a marzo 2024
# Asegurarte de que la columna 'Fecha' esté en el formato DateTime
DatosClima4$Fecha <- as.POSIXct(DatosClima4$Fecha)
# Crear el gráfico
ggplot(DatosClima4, aes(x = Fecha, y = Valor)) +
geom_line() +
facet_wrap(~ Variable, strip.position = 'left', scales = 'free_y', ncol = 1) +
theme_bw(base_size = 10) +
scale_x_datetime(breaks = seq(as.POSIXct('2023-02-01 00:00:00'), as.POSIXct('2024-06-18 23:55:00'), by = 'month'),
date_labels = '%Y-%b') +
labs(x = "Date", y = '') +
theme(strip.placement = "outside",
strip.background = element_blank(),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
axis.title.y = element_blank())
unique(DatosClima4$Variable)
# Aislo solo una de las variables climáticas para la detección de los datos atípicos
HR <- subset(DatosClima4, Variable == "HR.pct")
# Convertir los datos a un objeto de serie de tiempo
hr_clima <- ts(HR$Valor, frequency = 288)
# Detectar outliers
outliers <- tsoutliers(hr_clima)
# Agregar la información de outliers al dataframe original
HR$Outlier <- ifelse(seq_along(HR$Valor) %in% outliers$index, TRUE, FALSE)
# Proporción de los datos atípcos
prop.table(table(HR$Outlier)) * 100
# Visualización de los datos atípicos
ggplot(HR, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(HR, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Humedad Relativa")
HR$Valor <- ifelse(HR$Outlier == TRUE, NA, HR$Valor)
###### TEMPERATURA INTERNA ######
TEMIN <- subset(DatosClima4, Variable == "Temp.Interna.C")
temin_clima <- ts(TEMIN$Valor, frequency = 288)
temin_outliers <- tsoutliers(temin_clima)
TEMIN$Outlier <- ifelse(seq_along(TEMIN$Valor) %in% temin_outliers$index, TRUE, FALSE)
prop.table(table(TEMIN$Outlier)) * 100
ggplot(TEMIN, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(TEMIN, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Temperatura interna")
TEMIN$Valor <- ifelse(TEMIN$Outlier == TRUE, NA, TEMIN$Valor)
###### DEFICIT DE HUMEDAD ######
DH <- subset(DatosClima4, Variable == "HR.pct")
dh_clima <- ts(DH$Valor, frequency = 288)
dh_outliers <- tsoutliers(dh_clima)
DH$Outlier <- ifelse(seq_along(DH$Valor) %in% dh_outliers$index, TRUE, FALSE)
prop.table(table(DH$Outlier)) * 100
ggplot(DH, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(DH, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Deficit de humedad")
DH$Valor <- ifelse(DH$Outlier == TRUE, NA, DH$Valor)
###### TEMPERATURA EXTERNA ######
TEMEX <- subset(DatosClima4, Variable == "Temp.Exterior.C")
temex_clima <- ts(TEMEX$Valor, frequency = 288)
temex_outliers <- tsoutliers(temex_clima)
TEMEX$Outlier <- ifelse(seq_along(TEMEX$Valor) %in% temex_outliers$index, TRUE, FALSE)
prop.table(table(TEMEX$Outlier)) * 100
ggplot(TEMEX, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(TEMEX, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Temperatura exterior")
TEMEX$Valor <- ifelse(TEMEX$Outlier == TRUE, NA, TEMEX$Valor)
###### VELOCIDAD DEL VIENTO #####
VELVI <- subset(DatosClima4, Variable == "Vel.Viento.m.s" )
velvi_clima <- ts(VELVI$Valor, frequency = 288)
velvi_outliers <- tsoutliers(velvi_clima)
VELVI$Outlier <- ifelse(seq_along(VELVI$Valor) %in% velvi_outliers$index, TRUE, FALSE)
prop.table(table(VELVI$Outlier )) * 100
ggplot(VELVI, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(VELVI, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Velocidad del viento")
VELVI$Valor <- ifelse(VELVI$Outlier == TRUE, NA, VELVI$Valor)
###### RADIACION SOLAR #####
RADSO <- subset(DatosClima4, Variable == "Radiacion.W.m.")
radso_clima <- ts(RADSO$Valor, frequency = 288); head(sort(RADSO$Valor, decreasing = TRUE), 30)
###### RADIACION SOLAR #####
RADSO <- subset(DatosClima4, Variable == "Radiacion.W.m.")
RADSO$Valor <- ifelse(RADSO$Valor > 1200, NA, RADSO$Valor)
radso_clima <- ts(RADSO$Valor, frequency = 288); head(sort(RADSO$Valor, decreasing = TRUE), 30)
radso_outliers <- tsoutliers(radso_clima)
radso_clima <- ts(RADSO$Valor, frequency = 288)#; head(sort(RADSO$Valor, decreasing = TRUE), 30)
radso_outliers <- tsoutliers(radso_clima)
RADSO$Outlier <- ifelse(seq_along(RADSO$Valor) %in% radso_outliers$index, TRUE, FALSE)
prop.table(table(RADSO$Outlier )) * 100
ggplot(RADSO, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(RADSO, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Radiación solar")
###### SUMA DE RADIACION #####
SUMRA <- subset(DatosClima4, Variable == "Suma.Radiacion.J.cm")
sumra_clima <- ts(SUMRA$Valor, frequency = 288); head(sort(unique(SUMRA$Valor), decreasing = TRUE), 30)
sumra_outliers <- tsoutliers(sumra_clima)
SUMRA$Outlier <- ifelse(seq_along(SUMRA$Valor) %in% sumra_outliers, TRUE, FALSE)
prop.table(table(SUMRA$Outlier )) * 100
ggplot(SUMRA, aes(x = Fecha, y = Valor, color = Outlier)) +
geom_line() +
geom_point(data = subset(SUMRA, Outlier == TRUE), color = "red", size = 2) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
theme_bw() +
labs(title = "Detección de Outliers en la serie de tiempo de humedad relativa",
x = "Fecha",
y = "Suma de Radiación")
#### Se calcula la Deficiencia de Presión de Vapor (DPV) y le asigna a una nueva columna DPV en el dataframe DatosClima
DPV <- 0.611 * exp(17.502 * TEMIN$Valor/ (TEMIN$Valor + 240.97)) * (1 - (HR$Valor/100))
DPV
TEMIN
data_frame(Fecha= TEMIN$Fecha,
time= TEMIN$time,
hora= TEMIN$hora,
Variable = "DPV",
Valor= 0.611 * exp(17.502 * TEMIN$Valor/ (TEMIN$Valor + 240.97)) * (1 - (HR$Valor/100)),
Outlier = HR$Outlier)
data.frame(Fecha= TEMIN$Fecha,
time= TEMIN$time,
hora= TEMIN$hora,
Variable = "DPV",
Valor= 0.611 * exp(17.502 * TEMIN$Valor/ (TEMIN$Valor + 240.97)) * (1 - (HR$Valor/100)),
Outlier = HR$Outlier)
rbind(HR,
DPV,
DH,
TEMIN,
TEMEX,
VELVI,
RADSO,
SUMRA)
HR
DPV
DPV <- data.frame(Fecha= TEMIN$Fecha,
time= TEMIN$time,
hora= TEMIN$hora,
Variable = "DPV",
Valor= 0.611 * exp(17.502 * TEMIN$Valor/ (TEMIN$Valor + 240.97)) * (1 - (HR$Valor/100)),
Outlier = HR$Outlier)
rbind(HR,
DPV,
DH,
TEMIN,
TEMEX,
VELVI,
RADSO,
SUMRA)
SUMRA
DatosClima4 <- rbind(HR,
DPV,
DH,
TEMIN,
TEMEX,
VELVI,
RADSO,
SUMRA)
ClimaData5 <- DatosClima4 %>% group_by(time, Variable) %>%
summarise(AveValue=mean(Valor, na.rm = TRUE),
Sd_Value = sd(Valor, na.rm = TRUE),
n = n(),
se = sd(Valor, na.rm = TRUE) / sqrt(n()),  # Error estándar
ci_lower = mean(Valor, na.rm = TRUE) - qt(0.975, df = n-1) * se,  # Límite inferior del IC
ci_upper = mean(Valor, na.rm = TRUE) + qt(0.975, df = n-1) * se,
MaxVal= max(Valor, na.rm = TRUE),
MinVal= min(Valor, na.rm = TRUE) ) %>%   # Límite superior del IC
data.frame()
#### crea un gráfico de líneas con áreas sombreadas para mostrar la variación en la temperatura exterior e interior a lo largo del tiempo
ggplot(ClimaData5[ClimaData5$Variable=="Temp.Exterior.C" | ClimaData5$Variable=="Temp.Interna.C", ]) + theme_bw(14) +
geom_line(aes(time, AveValue, col=Variable, linetype=Variable)) +
#geom_ribbon(aes(x = time, ymin = ci_lower, ymax = ci_upper, fill=Variable), alpha = 0.2) +
geom_ribbon(aes(x = time, ymin = MinVal, ymax = MaxVal, fill=Variable), alpha = 0.3) +
scale_linetype_manual(name="Variable", labels = c("Temp.Exterior.C", "Temp.Interna.C"), values = c("longdash",  "solid"))+
scale_colour_manual(name="Variable", values=c('grey50', 'black'),
labels=c("Temp.Exterior.C", "Temp.Interna.C"),
guide = guide_legend(override.aes = list(
linetype = c("longdash",  "solid") )) )+
scale_x_continuous(breaks = c(1*60,6*60,12*60,18*60,24*60)) +
#scale_color_manual(values=c("black", "grey50", "grey30", "grey10")) +
labs(x="Minute", y='Air temperature (ºC)')+
theme(legend.position = "bottom",
legend.box = "vertical",
legend.title=element_blank(),
legend.box.background = element_rect(colour = "black"))
##### Devuelve a cero la suma radiación antes del amanecer
ClimaData5[ClimaData5$Variable=="Suma.Radiacion.J.cm" & ClimaData5$time<375, c(3:8) ] <- 0
ggplot(data=ClimaData5) + geom_line(aes(time, AveValue)) +
facet_wrap(~Variable, scales="free", labeller=label_parsed)+
labs(x="Hour", y='')
##### Grafico detallado de la radiación solar, La inclusión de áreas sombreadas proporciona una representación visual del nivel de confianza en las mediciones
scale_factor <- 2.5  # Ajustar según sea necesario
ggplot(ClimaData5, aes(x = time)) +
theme_bw(base_size = 13) +
geom_line(data = subset(ClimaData5, Variable == "Radiacion.W.m."), aes(y = AveValue, color = "Radiacion.W.m.")) +
geom_ribbon(data = subset(ClimaData5, Variable == "Radiacion.W.m."), aes(ymin = ci_lower, ymax = ci_upper, fill = "Radiacion.W.m."), alpha = 0.4) +
geom_line(data = subset(ClimaData5, Variable == "Suma.Radiacion.J.cm"), aes(y = AveValue / scale_factor, color = "Suma.Radiacion.J.cm")) +
geom_ribbon(data = subset(ClimaData5, Variable == "Suma.Radiacion.J.cm"), aes(ymin = ci_lower / scale_factor, ymax = ci_upper / scale_factor, fill = "Suma.Radiacion.J.cm"), alpha = 0.4) +
scale_y_continuous(
name = expression("Solar radiation  (W " * m^-2 * ")"),
limits = c(0, 670),  # Definir los límites del eje principal
sec.axis = sec_axis(~ . * scale_factor, name = expression("Accumulated solar radiation (J " * m^-2 * " day)") , breaks = seq(0, 1700, by = 400) )
) +
scale_color_manual(
name = "Variable",
values = c("Radiacion.W.m." = "orange", "Suma.Radiacion.J.cm" = "red")
) +
scale_fill_manual(
name = "Variable",
values = c("Radiacion.W.m." = "orange", "Suma.Radiacion.J.cm" = "red")
) +
scale_x_continuous(breaks = c(1 * 60, 6 * 60, 12 * 60, 18 * 60, 24 * 60)) +
labs(x = "Time", y = expression("Solar radiation  (W " * m^-2 * ")")) +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.title = element_blank(),
legend.box.background = element_rect(colour = "black")
)
scale_factor <- 33
ggplot(ClimaData5, aes(x = time)) +
theme_bw(base_size = 13) +
geom_line(data = subset(ClimaData5, Variable == "DPV"), aes(y = AveValue, color = "DPV")) +
#geom_ribbon(data = subset(ClimaData5, Variable == "DPV"), aes(x = time, ymin = ci_lower, ymax = ci_upper, fill=Variable), alpha = 0.2) +
geom_ribbon(data = subset(ClimaData5, Variable == "DPV"), aes(x = time, ymin = MinVal, ymax = MaxVal, fill=Variable), alpha = 0.3) +
geom_line(data = subset(ClimaData5, Variable == "HR.pct"), aes(y = AveValue / scale_factor, color = "HR.pct")) +
#geom_ribbon(data = subset(ClimaData5, Variable == "HR.pct"), aes(ymin = ci_lower / scale_factor, ymax = ci_upper / scale_factor, fill = "HR.pct"), alpha = 0.4) +
geom_ribbon(data = subset(ClimaData5, Variable == "HR.pct"), aes(x = time, ymin = MinVal/ scale_factor, ymax = MaxVal/ scale_factor, fill=Variable), alpha = 0.3) +
scale_y_continuous(
name = expression("Vapor pressure deficit  (Kpa)"),
limits = c(0, 3.5),  # Definir los límites del eje principal
sec.axis = sec_axis(~ . * scale_factor, name = expression("Relative humidity (%)") , breaks = seq(20, 100, by = 20) )
) +
scale_color_manual(
name = "Variable",
values = c("DPV" = "orange", "HR.pct" = "red")
) +
scale_fill_manual(
name = "Variable",
values = c("DPV" = "orange", "HR.pct" = "red")
) +
scale_x_continuous(breaks = c(1 * 60, 6 * 60, 12 * 60, 18 * 60, 24 * 60)) +
labs(x = "Time", y = expression("Vapor pressure deficit  (Kpa)")) +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.title = element_blank(),
legend.box.background = element_rect(colour = "black")
)
# --------------------------T O M G R O  V 1.0--------------------------
#       MAIN PROGRAM FOR THE TOMATO MODEL
#       DEVELOPED BY E. DAYAN, J. W. JONES, H. VAN KEULEN, AND H. CHALLA
#       JULY, 1988
# ----------------------------------------------------------------------
#       with individual organ simulations,
#            a carbohydrate pool,
#            independant simulation of leaf d.wt and area increase.
#       All variable are calculated on a per plant basis.
# ......................................................................
library(matlab)
library(chron)
library(PBSmodelling)
# --------------------------T O M G R O  V 1.0--------------------------
#       MAIN PROGRAM FOR THE TOMATO MODEL
#       DEVELOPED BY E. DAYAN, J. W. JONES, H. VAN KEULEN, AND H. CHALLA
#       JULY, 1988
# ----------------------------------------------------------------------
#       with individual organ simulations,
#            a carbohydrate pool,
#            independant simulation of leaf d.wt and area increase.
#       All variable are calculated on a per plant basis.
# ......................................................................
library(matlab)
library(chron)
library(PBSmodelling)
# Adicionar la ruta de acuerdo con el computador donde se esté trabajando
# NO Modificar esta
setwd("~/Dropbox/2023 segundo semestre UNAL/Tomgro model/Codigo/")
rm(list = ls(all = TRUE))
climfile = 'C99AF1B.txt'
RefIntClim = read.table(climfile)
source('cropparm.R')
source('mgt.R')
# initial conditions
results = matrix(0, nrow = NDAYS, ncol = 33)
source('init2.R')
RCDRW = 0
SOSIR = 0
GRESP = 0
TRESP = 0
# **********************************************************************
# daily loop
# **********
for(JDAY in 1:NDAYS){
TIME = (JDAY - 1) * DELT
DATE = mod(TIME + NSTART, 365)
# initialize variables that accumulate during the day
GP = 0
TEMFAC = 0
RMAINT = 0
RDVLV = 0
RDVFR = 0
TEMEXP = 0
SLAMIN = 0
# *********************************************************************
# fast loop (if time-step = 1 hour, NFAST = 24)
# *********************************************
for(JF in 1:NFAST){
# TFAST is the hour of the day (h)
TFAST = (JF - 1) * 24/NFAST
# ***************************************************************
# input of hourly climate data --- source('IPW_AL94.R) ---
d=find(RefIntClim[,1] == DATE & RefIntClim[ ,2] == (TFAST+1))
if(length(d)>1){print('more than 1 found!!' )}
if(isempty(d)){print(' invalid index of climate data')}
JUL = RefIntClim[d, 1]
IHE = RefIntClim[d, 2]
solrad = RefIntClim[d, 3]
TMPA=RefIntClim[d, 4]
VPD=RefIntClim[d, 5]
CO2L=RefIntClim[d, 6]
PAR = solrad * TRGH
PPFD = PAR * 4.57
# ***************************************************************
# calculation of development rate --- source('DEVFAST.R') ---
# temperature effect on development rate
TEMFCF = approx(XTEM,GENTEM,TMPA)$y
# temperature effect on expansion rate
TEMEXP1 = approx(TEMPLE,PLETEM,TMPA)$y
# temperature effect on dry matter distribution
SLAMIN1 = approx(TEMSLA,SLAM,TMPA,yleft=0)$y
# leaf aging
RDVLVF = approx(XLV,RDVLVT,TMPA)$y
# fruit aging
RDVFRF = approx(XFR,RDVFRT,TMPA)$y
# ***************************************************************
# calculation of gross photosynthesis --- source('PHOTO2.R') ---
GPF = 0
# effect of CO2 on Pmax (from Gainesville)
TAU2 = 0.03
PMAX = TAU1 * CO2L
if(CO2L>1500){PMAX = (TAU1*1500) + (TAU2*(CO2L-1500))}
# reduction of Pmax at extreme temperatures
PMAX = PMAX * approx(TMPG,PGRED,TMPA)$y
if(PPFD >= 0.001){
# reduction of Pmax by VPD
if(VPD>=VPDL){PMAX = PMAX * exp(CK*(VPD-VPDL))}
# Acock's model
TOP = (1-XM)*PMAX + QE*XK*PPFD
BOT = (1-XM)*PMAX + QE*XK*PPFD*exp(-XK*PLAR2*PLM2)
GPF = (PMAX/XK)*log(TOP/BOT)
# conversion from CO2 to CH2O (30/44 = 0.682)
GPF = GPF * 0.682
# conversion of GPF from ?M/m2-s into g/m2-day
#?M/m2-s x 0.000044g/?M x 3600s/h x 24h/d = 3.8016 g/m2-day
GPF = GPF * 3.8016/PLM2
}
# ****************************************************************
# calculation of maintenance respiration --- source('resp.R') ---
# Effect of temperature on maintenance respiration
RMAINTF = (RMRL*(TDML2+TDMS)+RMRF*DMGF) * (Q10^(0.1*TMPA-2.0))
#integration of variables on 24 hours
TEMFAC = TEMFAC + TEMFCF*DTFAST
TEMEXP = TEMEXP + TEMEXP1*DTFAST
SLAMIN = SLAMIN + SLAMIN1*DTFAST
RMAINT = RMAINT + RMAINTF*DTFAST
RDVLV = RDVLV + RDVLVF*DTFAST
RDVFR = RDVFR + RDVFRF*DTFAST
GP = GP + GPF*DTFAST
}
# end of fast loop
# **********************************************************************
# ***********************************************
# development and sink strength
source('DEVRATE6.R')
# daily production of biomass
RCDRW = GREF*(GP+CPOOL-RMAINT)
if(RCDRW<0){
RCDRW = 0
RMAINT = GP+CPOOL}
RCDRW = RCDRW * (1 - approx(XROOT,PROOT,PLSTN,yright=min(PROOT))$y)
# calculation of source/sink ratio
SOSIR = min(1,RCDRW/(PNGP+EPS))
# daily growth respiration
# aangepast door ALEX zodat SOSIR wordt in rekening gebracht
GRESP = ((PNGP*SOSIR)/GREF) * (1 - GREF*1.125);
# 1.125 is (30/12)*0.45 to convert GREF from gDM/gCH2O to gCH2O/gCH2O
# daily total respiration
TRESP = RMAINT + GRESP;
# ***********************************************
# fruit setting --- source('LOSRATE5.R') ---
TABNF = 0
if(TDMF<EPS){dummy=0}else
{FABOR = min(1,(0.67-ABORMX*SOSIR))
FABOR = max(0,FABOR)
TABNF =FABOR*TRCNF
}
TABF = TABF + TABNF
TNSF = TNF - TABF
#C location of "aborted" fruits: distal position
B=0
for(I in 1:NBRUP){
# if no new frt or less than 2 frt on truss I or no more abortion...
if(RCNF[I]==0 || XNFT[I]<=2 || B>=TABNF){dummy=0}else
{ABNF[I] = min(4,RCNF[I],TABNF-B,XNFT[I]-2-ABOR[I])
ABNF[I] = max(0,ABNF[I])
B = B + ABNF[I]
ABOR[I] = ABOR[I] + ABNF[I]
NSF[I] = floor(XNFT[I] - ABOR[I])
# attention ceci conduit ? compter 2 fruits avort?s pour ABOR = 1,1 !
if(ABOR[I]<1){dummy=0}else
{for(J in c((NSF[I]+1):floor(XNFT[I]))){
DWF[I,J] = -EPS
}}}}
# *********************************************************
# dry matter partitioning
source('DMRATE6.R')
# *********************************************************
# outputs
results[JDAY,]<-c(DATE,PLSTN,NBLV,NBRU,TDML+CPOOL,TDMS+WSTMI,TDMF,
TDML+TDMS+TDMF+CPOOL+WSTMI,PLAR,TDML,TDML2,TDML2+CPOOL,PLAR2,
PLAR2*10000/((TDML2+CPOOL)/(1.0+FRPT)),
DMMF,DMGF,TNSF,TNF-TNSF,TNMF,TDMF/(TDML+TDMS+TDMF+CPOOL),
GP,RMAINT,GRESP,SOSIR,CPOOL,PTNLVS,PTNSTM,PTNFRT, NBRU, NBRUP,TABNF,TNF,TNSF)
# info<-paste(DATE,'days simulated')
# setWinProgressBar(pb, DATE,paste('TOMGRO V.2.0 -',NDAYS,'days to be simulated'),info)
}
# Adicionar la ruta de acuerdo con el computador donde se esté trabajando
# NO Modificar esta
setwd("~/Dropbox/2023 segundo semestre UNAL/Tomgro model/Codigo/")
rm(list = ls(all = TRUE))
climfile = 'C99AF1B.txt'
RefIntClim = read.table(climfile)
View(RefIntClim)
source('init2.R')
# initial conditions
results = matrix(0, nrow = NDAYS, ncol = 33)
source('init2.R')
source('cropparm.R')
source('mgt.R')
# initial conditions
results = matrix(0, nrow = NDAYS, ncol = 33)
source('init2.R')
View(RefIntClim)
